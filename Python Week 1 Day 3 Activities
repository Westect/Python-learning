{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0b7714cb",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Write a Python program to find those numbers which are divisible by 7 and multiple of 5, \n",
    "#between 1500 and 2700 (both included).\n",
    "\n",
    "x=[]\n",
    "\n",
    "for i in range(1500, 2701):\n",
    "    if i%7==0 and i%5==0:\n",
    "        x.append(i)       \n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "1fdfdfec",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4\n",
      "My guess was 7, looks like my guess was wrong.\n"
     ]
    }
   ],
   "source": [
    "#Write a Python program to guess a number between 1 to 9.\n",
    "import random\n",
    "\n",
    "my_guess = int(input())\n",
    "computer_guess = random.randint(1,9)\n",
    "\n",
    "if my_guess == computer_guess:\n",
    "    print(\"My guess was \"+str(computer_guess)+\", looks like my guess was right!\")\n",
    "else:\n",
    "    print(\"My guess was \"+str(computer_guess)+\", looks like my guess was wrong.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3eb13dbf",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Write a Python program to construct the following pattern, using a nested for loop.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7c87172c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Write a Python program to check whether an alphabet is a vowel or consonant\n",
    "\n",
    "vowels=['A', 'E', 'I', 'O', 'U']\n",
    "consonants=['B', 'C', 'D', 'F', 'G', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'S', 'T', 'V', 'X', 'Z', 'H', 'R', 'W', 'Y']\n",
    "\n",
    "print('Please enter an alphabet ')\n",
    "alphabet = str(input()).upper()\n",
    "\n",
    "if alphabet in vowels:\n",
    "    print('This is a vowel!')\n",
    "elif alphabet in consonants:\n",
    "    print('This is a consonant!')\n",
    "else:\n",
    "    print('This alphabet is lame')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3929c0f1",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Write a Python program to sum of two given integers. \n",
    "#However, if the sum is between 15 to 20 it will return 20\n",
    "\n",
    "a = 12\n",
    "b = 4\n",
    "\n",
    "if a+b > 15 and a+b < 20:\n",
    "    print('20')\n",
    "else:\n",
    "    print(a+b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "65d0e830",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Write a Python function to find the Max of three numbers.\n",
    "\n",
    "def find_max_of3(a, b, c):\n",
    "    return max(a, b, c)\n",
    "\n",
    "find_max_of3(1, 2, 3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bb8d41ca",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Write a Python program to reverse a string. Sample String : \"1234abcd\"\n",
    "\n",
    "string = '1234abcd'\n",
    "new_string = ''\n",
    "\n",
    "for x in range(len(string)):\n",
    "    new_string=new_string+(string[len(string)-1-x])\n",
    "\n",
    "new_string"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "37cc4150",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Write a Python function that accepts a string and calculate \n",
    "#the number of upper case letters and lower case letters. Sample String : 'The quick Brow Fox'\n",
    "\n",
    "string = 'The quick Brow Fox'\n",
    "\n",
    "uppercount = 0\n",
    "lowercount = 0\n",
    "\n",
    "for x in range(len(string)):\n",
    "    if string[x].isupper():\n",
    "        uppercount += 1\n",
    "\n",
    "for x in range(len(string)):\n",
    "    if string[x].islower():\n",
    "        lowercount += 1   \n",
    "        \n",
    "print(\"There are \"+str(uppercount)+\" uppercase letters and \"+str(lowercount)+\" lowercase letters.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "499fca6b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 is not a prime number.\n"
     ]
    }
   ],
   "source": [
    "#Write a Python function that takes a number as a parameter and check the number is prime or not.\n",
    "\n",
    "def check_prime(x):\n",
    "    notprime = False\n",
    "    for i in range(2, x):\n",
    "        if x % i == 0:\n",
    "            notprime = True\n",
    "            break\n",
    "    if notprime or 1==x:\n",
    "        print(x, 'is not a prime number.')\n",
    "    else:\n",
    "        print(x, 'is a prime number.')\n",
    "\n",
    "check_prime(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "023d2c95",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Write a Python function to create and print a list \n",
    "#where the values are square of numbers between 1 and 30 (both included).\n",
    "x=[]\n",
    "\n",
    "for i in range(1, 31):\n",
    "    x.append(i*i)\n",
    "\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6d7fb84b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Write a Python program to create two empty classes, Student and Marks. \n",
    "#Now create some instances and check whether they are instances of the said classes or not. \n",
    "#Also, check whether the said classes are subclasses of the built-in object class or not.\n",
    "class Student:\n",
    "    pass\n",
    "\n",
    "class Marks:\n",
    "    pass\n",
    "\n",
    "weslie = Student()\n",
    "carlo = Student()\n",
    "\n",
    "mark1 = Marks()\n",
    "mark2 = Marks()\n",
    "\n",
    "print(\"Weslie is type: \"+str(type(weslie)))\n",
    "print(\"Carlo is type: \"+str(type(carlo)))\n",
    "\n",
    "print(\"mark1 is type: \"+str(type(mark1)))\n",
    "print(\"mark2 is type: \"+str(type(mark2)))\n",
    "\n",
    "if issubclass(Student, object):\n",
    "    print(\"Student is a subclass of the built-in object class\")\n",
    "else:\n",
    "    print(\"Student is not a subclass of the built-in object class\")\n",
    "\n",
    "if issubclass(Marks, object):\n",
    "    print(\"Marks is a subclass of the built-in object class\")\n",
    "else:\n",
    "    print(\"Marks is not a subclass of the built-in object class\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7fafc8b6",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Write a Python class named Student with two attributes student_name, marks. \n",
    "#Modify the attribute values of the said class and print the original and \n",
    "#modified values of the said attributes.\n",
    "\n",
    "class Student:\n",
    "    def __init__(self, student_name, marks):\n",
    "        self.student_name = student_name\n",
    "        self.marks = marks\n",
    "        \n",
    "    def get_info(self):\n",
    "        print('Hi, my name is '+str(self.student_name)+', and my mark is '+str(self.marks))\n",
    "\n",
    "weslie = Student('Weslie Chung', 61)\n",
    "weslie.get_info()\n",
    "\n",
    "weslie.student_name = 'Jason Huang'\n",
    "weslie.marks = '99'\n",
    "weslie.get_info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "abb0fd2d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "XXXXXXXIX\n"
     ]
    }
   ],
   "source": [
    "#Write a Python class to convert an integer to a roman numeral.\n",
    "\n",
    "class roman:\n",
    "    def __init__(self, num):\n",
    "        remainder = int(num % 10)\n",
    "\n",
    "        X_count = int((num - remainder)/10)\n",
    "\n",
    "        Is = ''\n",
    "        if remainder == 4:\n",
    "            Is = 'IV'\n",
    "        elif remainder == 9:\n",
    "            Is = 'IX'\n",
    "        elif remainder >= 5:\n",
    "            Is = 'V'+('I'*(remainder-5))\n",
    "        else:\n",
    "            Is = 'I'*remainder\n",
    "        self.numeral = ('X'*X_count)+Is\n",
    "        \n",
    "test_roman = roman(79)\n",
    "print(test_roman.numeral)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "caff692f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hello .py\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'.py hello'"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Write a Python class to reverse a string word by word. Input string : 'hello .py'\n",
    "\n",
    "my_string = input()\n",
    "my_string_list = my_string.split()\n",
    "reverse_string = ''\n",
    "\n",
    "for x in range(len(my_string_list)):\n",
    "    reverse_string = reverse_string + (my_string_list[len(my_string_list) - x - 1]) + ' '\n",
    "reverse_string = reverse_string[:-1]\n",
    "\n",
    "reverse_string"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "095bd9b4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "24"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Write a Python class named Rectangle \n",
    "#constructed by a length and width and a method which will compute the area of a rectangle.\n",
    "\n",
    "class Rectangle:\n",
    "    def __init__(self, length, width):\n",
    "        self.length = length\n",
    "        self.width = width\n",
    "    \n",
    "    def get_area(self):\n",
    "        return self.length * self.width\n",
    "\n",
    "test = Rectangle(4, 6)\n",
    "test.get_area()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
